# 反向代理
server {
      listen 80;
​
      root /vagrant/proxy;
​
      index index.html index.htm index.php;
​
      server_name proxy.cc;
​
      # 代理到此地址
      location / {
            proxy_pass http://10.11.49.34;
      }

      include enable-php-pathinfo.conf;

      error_log /vagrant/nginx-log/error-proxy.cc.log;

      access_log /vagrant/nginx-log/aceess-proxy.cc.log;
}
​
# 参考地址：https://www.hi-linux.com/posts/42176.html

# websocket 代理
# 反向代理模式下，由于客户端不能察觉代理的存在，nginx 从1.3.13版本之后使用了一个特殊的模式，当从源站接到 HTTP 101 时，nginx 将维持客户端和服务端之间的连接，因为 Upgrade 头不能传递到后端，需要在手动添加 header
location / {
    proxy_pass http://backend;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
}

# 一个更加优雅的解决：使用 map 指令，map 是 ngx_http_map_module中的指令，可以将变量组合成为新的变量，下面的配置根据客户端传来的连接中是否带有 Upgrade 头来决定是否给源站传递 Connection 头：
http {
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    server {
        ...

        location /socket/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
    }
}

# 默认情况下，连接将会在无数据传输60秒后关闭，proxy_read_timeout 参数可以延长这个时间；或者源站通过定期发送 ping 帧以保持连接并确认连接是否还在使用。

# 参考地址：https://www.starduster.me/2016/08/23/brief-talk-of-websocket/